
library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.STD_LOGIC_ARITH.all;
use IEEE.STD_LOGIC_UNSIGNED.all;

entity idu is 
  port (
    instruction: in std_logic_vector(16 downto 0); -- input instruction to be decoded
    operation: out std_logic_vector(3 downto 0); -- 4 bit opcode for the ALU (IR(15 downto12))
    shift_rotate_operation: out std_logic_vector(2 downto 0); -- a number between 0 to 7 indicating ?how many times?
    operand_selection: out std_logic; -- '0' means operand2 <= Ry, '1' means operand2 <= kk 
    x_address,y_address : out std_logic_vector(3 downto 0); -- Rx and Ry addresses
    port_address: out std_logic_vector(7 downto 0); -- port_ID 
    conditional: out std_logic; -- indicating the jump is conditional or unconditional
    jump: out std_logic; -- indicating the instruction type, '1' means JMP, JZ, or JC and '0' means normal
    jump_address: out std_logic_vector(7 downto 0); -- indicating the line number for jump
    condition_flag: out std_logic; -- condition type for jump, '0' means JZ, '1' means JC
    exp: out std_logic; -- indicating whether the instruction is export (EXP) or not
    halt: out std_logic -- '1' means "stop the execution" (end of program)
);
end idu;

architecture Idu of idu is
begin
  process(instruction) begin
    
     operation              <= instruction(15 downto 12);
     operand_selection      <= instruction(16);


-----------------shift and rotate operation----------------------------------------
   
     if(instruction(15 downto 12)="1000" or 
        instruction(15 downto 12)="1001" or
        instruction(15 downto 12)="1010" or
        instruction(15 downto 12)="1011" or
        instruction(15 downto 12)="1100" or
        instruction(15 downto 12)="1101") then
                shift_rotate_operation <= instruction(2 downto 0); 
     else 
                shift_rotate_operation <= "ZZZ";   
end if;

---------------------------------y_address Output-----------------------------------     
  	
  --This is for y_address output   
     
     if (instruction(16)='1') then  y_address <= "ZZZZ";
     elsif((instruction(16)='0') and 
        ((instruction(15 downto 12)="0000") or
        (instruction(15 downto 12)="0001") or 
        (instruction(15 downto 12)="0010") or 
        (instruction(15 downto 12)="0011") or 
	      (instruction(15 downto 12)="0100") or 
        (instruction(15 downto 12)="0110"))) then
		     y_address <= instruction(7 downto 4);  
                
     else 
               y_address <= "ZZZZ";  
     end if;                          
   
-----------------------------x-address output-----------------------------------------
   
     if(
	      (instruction(15 downto 12)="1110") or
        (instruction(15 downto 12)="1111")) then
            x_address <= "ZZZZ"; 
     else 
            x_address <= instruction(11 downto 8);     
     end if;   
  
------------------------------Conditional Jump----------------------------------------

   -- if(instruction(16)='0' and instruction(15 downto 12) = "1111") then
        --conditional <= '0'; 

    if(instruction(16)='1' and instruction(15 downto 12) = "1111") then     	
        conditional <= '1';
     	    if instruction(11)='1' then 
		 condition_flag <= '1'; --this indicats JC
	    else condition_flag <= '0'; --this indicats JZ
	    end if;    
    else conditional <= '0';  
	 condition_flag <= 'Z'; 
    end if;     

------------------------------------Jump instruction and Jump Address----------------

     if instruction(15 downto 12) = "1111" then
        jump  <= '1'; 
	      jump_address <= instruction (7 downto 0);
     else 
        jump  <= '0';
        jump_address  <= "ZZZZZZZZ";
     end if;
     
 -------------------------------Jump Address-----------------------------------------    
    --if instruction(15 downto 12) = "1111" then
--        jump_address  <= instruction(7 downto 0);
--    else 
--        jump_address  <= "ZZZZZZZZ";
--    end if;
--    
  
------------------Export, Type 2--------------------------------------------
    if (instruction(16 downto 12)="10111") then
        exp <= '1'; 
        port_address <= instruction(7 downto 0);--kk in type 2 is 7 downto 0        
        
    else 
        exp <= '0'; 
        port_address <= "ZZZZZZZZ";
    end if;

------------------Halt, End of the program-------------------------   
    
    if (instruction(15 downto 12)="1110") then
        halt <= '1'; --stop the execution
    else 
        halt  <= '0';
    end if;
--------------------------------------------------------------------  
     
   
  end process;
 
  
end Idu;
